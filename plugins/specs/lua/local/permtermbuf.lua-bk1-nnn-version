return {
  'mtkld/permtermbuf.nvim',
  dependencies = {
    'mtkld/phxman.nvim',
  },
  config = function()
    require('permtermbuf').setup {
      {
        name = 'phxmansel',
        cmd = 'nnn %nav_path% -S -p -',
        buffer_name = 'phxmansel',
        callback_pre_exec_cmd = function(cmd)
          -- Get the project base path
          local project_base_path = require('phxman.properties').root.root_path

          -- Define the path to the '.latest-project-nav-path' file
          local latest_nav_path_file = project_base_path .. '/.latest_project_nav_path'

          -- Check if the '.latest-project-nav-path' file exists, otherwise use the project base path
          local nav_path = project_base_path
          if vim.fn.filereadable(latest_nav_path_file) == 1 then
            local nav_path_content = vim.fn.readfile(latest_nav_path_file)
            if #nav_path_content > 0 then
              nav_path = nav_path_content[1] -- Use the first line in the file as the nav path
            end
          end
          -- Substitute %nav_path% with the determined nav_path
          return cmd:gsub('%%nav_path%%', nav_path)
        end,
        callback_on_exit = function(output)
          -- Concatenate output into a single string and split it into lines (file paths)
          local file_paths = vim.split(table.concat(output, '\n'), '\n', { trimempty = true })

          -- If no paths were returned, do nothing
          if #file_paths == 0 then
            return
          end

          -- We will just use the first path from the file_paths, assuming it's the selected one
          local selected_project = file_paths[1]

          -- Call the switch_to_project function with the selected project
          if selected_project then
            require('phxman.project').external_plugin_call_switch_to_project(selected_project)
          else
            vim.notify('No valid project selected', vim.log.levels.WARN)
          end
        end,
      },

      {
        name = 'tt_setup',
        cmd = 'tt-setup-once-then-ressurect',
        callback_post_exec_cmd = function()
          -- No spellcheck on terminal buffer
          vim.cmd 'set nospell'
        end,
        buffer_name = 'tmux',
      },
      {
        name = 'neomutt',
        cmd = 'neomutt',
        buffer_name = 'neomutt',
      },
      {
        name = 'lazygit',
        cmd = 'lazygit --path %git_dir%',
        buffer_name = 'lazygit',
        -- first_toggle_cmd = 'nnn -S -p - %cwd%',
        callback_pre_exec_cmd = function(cmd)
          -- Find the current file's absolute directory path
          local current_file_dir = vim.fn.expand '%:p:h'

          -- Traverse backward and stop at the .git directory
          local git_dir = vim.fn.finddir('.git', current_file_dir .. ';')

          -- If no .git directory is found, print a message and return nil
          if git_dir == '' then
            print 'No .git directory found. Press Enter to continue.'
            vim.fn.input '' -- Wait for the user to press Enter
            return nil -- Return nil to indicate no git directory was found
          end

          -- Go one step up (remove the trailing '/.git' from the path)
          local git_root_dir = vim.fn.fnamemodify(git_dir, ':h')

          -- Substitute %git_dir% with the git root directory and return the updated command
          return cmd:gsub('%%git_dir%%', git_root_dir)
        end,
      },
      {
        name = 'nnn',
        cmd = 'nnn %cwd% -S -p -',
        buffer_name = 'nnn',
        callback_pre_exec_cmd = function(cmd)
          -- Get the current project directory from proman
          local project_dir = require('phxman.properties').current_project.project_path

          -- Path to the .nnn_file_pick_latest_path file within the current project directory
          local latest_path_file = project_dir .. '/.nnn_file_pick_latest_path'

          -- Check if .nnn_file_pick_latest_path exists, otherwise use the project directory
          local cwd
          if vim.fn.filereadable(latest_path_file) == 1 then
            -- Read the latest path from the file
            local latest_path = vim.fn.readfile(latest_path_file)
            if #latest_path > 0 then
              cwd = latest_path[1] -- Use the first line as the CWD
            else
              cwd = project_dir -- Default to project directory if file is empty
            end
          else
            cwd = project_dir -- Default to project directory if file does not exist
          end

          -- Substitute %cwd% with the determined directory
          return cmd:gsub('%%cwd%%', cwd)
        end,
        callback_on_exit = function(output)
          -- Concatenate output into a single string and split it into lines (file paths)
          local file_path = table.concat(output, '\n'):gsub('\n', '') -- Clean up the output

          -- If no path was returned, do nothing
          if file_path == '' then
            return
          end

          -- Save the parent directory of the selected file to .nnn_file_pick_latest_path
          local selected_dir = vim.fn.fnamemodify(file_path, ':h') -- Get the directory of the selected file
          local project_dir = require('phxman.properties').current_project.project_path
          local latest_path_file = project_dir .. '/.nnn_file_pick_latest_path'

          vim.fn.writefile({ selected_dir }, latest_path_file)

          -- Open the selected file if it exists
          if vim.fn.filereadable(file_path) == 1 then
            vim.cmd('edit ' .. vim.fn.fnameescape(file_path))

            -- Trigger the necessary autocommands manually to ensure Treesitter works
            vim.cmd 'doautocmd BufReadPost'
            vim.cmd 'doautocmd FileType'
          else
            -- Notify if the file doesn't exist
            vim.notify('The file does not exist: ' .. file_path, vim.log.levels.ERROR)
          end
        end,
      },
      {
        name = 'phxman_add_dir',
        cmd = 'nnn %cwd% -S -p -',
        buffer_name = 'phxman_add_dir',
        callback_pre_exec_cmd = function(cmd)
          -- Get the current working directory and substitute %cwd% with it
          local cwd = vim.fn.getcwd()
          return cmd:gsub('%%cwd%%', cwd)
        end,
        callback_on_exit = function(output)
          -- Concatenate output into a single string and split it into lines (file paths)
          local file_paths = vim.split(table.concat(output, '\n'), '\n', { trimempty = true })

          -- If no paths were returned, do nothing
          if #file_paths == 0 then
            return
          end

          -- Get the current project directory
          local project_dir = require('phxman.properties').current_project.project_path

          -- Define the path to the 'include' file
          local include_file_path = project_dir .. '/include'

          -- Read the contents of the 'include' file if it exists, otherwise create an empty list
          local include_file_content = {}
          if vim.fn.filereadable(include_file_path) == 1 then
            include_file_content = vim.fn.readfile(include_file_path)
          end

          -- Create a set of existing file paths for fast lookup
          local existing_paths = {}
          for _, line in ipairs(include_file_content) do
            existing_paths[line] = true
          end

          -- Add any new file paths to the 'include' file
          local new_paths_added = false
          for _, file_path in ipairs(file_paths) do
            if not existing_paths[file_path] then
              table.insert(include_file_content, file_path)
              new_paths_added = true
            end
          end

          -- Write the updated content back to the 'include' file if new paths were added
          if new_paths_added then
            vim.fn.writefile(include_file_content, include_file_path)
            require('phxman.project').redo_symlinks()
            return 'New file paths added to include.'
          else
            return 'No new file paths to add.'
          end
        end,
      },
    }
  end,
}
